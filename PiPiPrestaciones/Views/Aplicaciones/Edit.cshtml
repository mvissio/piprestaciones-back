@model PiPiPrestaciones.Models.Aplicacion

@{
    ViewBag.Title = "Edit";

}


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    @Html.HiddenFor(model => model.AplicacionId);

    <div class="row">
        <div class="col l3" id="menuList" style="background-color:@Model.CssAplicacion.ColorBack">

            @Html.Partial("_ListMenus", Model.Menus)


        </div>

        <div id="menu-edit" class="col l9">



        </div>



    </div>







    @*<div class="form-horizontal">
            <h4>Aplicacion</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.AplicacionId)

            <div class="form-group">
                @Html.LabelFor(model => model.VersionId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.VersionId, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.VersionId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.LastModification, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.LastModification, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.LastModification, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CreateAt, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CreateAt, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CreateAt, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CreateBy, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CreateBy, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CreateBy, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-default" />
                </div>
            </div>
        </div>*@
}
<input hidden type="text" value="@Model.AplicacionId" id="appId" />


<div>
    @Html.ActionLink("Back to List", "Index")
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/colorpicker/js")
    @Styles.Render("~/bundles/colorpicker/css")
@Styles.Render("~/bundles/jquery-ui/css")
@Scripts.Render("~/bundles/jquery-ui/js")

}


<style>
    .btn-edit {
       width: 100%;
        border-radius: 1em;
        margin-bottom: 1em;
    }

    #menu-edit {
        position: relative;
    }

    .selector {
    }

    #menuList {
        overflow: scroll;
        height:600px;
        max-width:400px;
    }
</style>

<script>
    $(function () {
        $("#sortable").sortable({

        });
        $("#sortable").disableSelection();


    });

    var updateMenuOrder = function (data) {
        debugger;

           $.ajax({
                //method: "POST",
                url: "@Url.Action("UpdateMenuOrder", "Aplicaciones")",
                data: data
                //cache: false
            })
                .done(function (html) {
                    if (html != "true") {

                        alert("ocurrio un error");
                    } else {

                        //$("#menuList").html(html)
                    }
                });


    }

    

    $(document).ready(function () {

        $("#sortable").sortable({
            update: function (event, ui) {

                var index = 0;
                var menus = new Array();
                var listMenu = new Object();
                listMenu.menus = menus;

                //var data = $(this).children("li");
                $("#sortable li").each(function () {

                    //   var menu = new Object();
                    var menu = {
                        menuId: $(this).attr("data-id"),
                        order: String(index)
                    }
                    //  menu.menuId = $(this).attr("data-id");
                    //menu.order = String(index);
                    //listMenu.menus.push(menu);
                    updateMenuOrder(menu);
                    index++;
                });




                // var JString = JSON.serializeArray(listMenu);
                //var data = $.parseJSON(JString);
                //updateMenuOrder(listMenu);




            }
        });


        $(".btn-edit").click(function () {

            $("#menu-edit").empty();
            var type = $(this).attr("data-type");
            var data = { "type": type };

            $.ajax({
            url: '@Url.Action("GetEditMenu", "Aplicaciones")',
                cache: false,
                data: data,
                success: function (html) { $("#menu-edit").html(html); }
            });
        });

        $(".flag-img").click(function () {
            debugger;
            var imgUrl = $(this).attr("data-flag");
            $("#ImageUrl").val(imgUrl);
            $("#edit-flag-ds").css("background-image", "../../Resources/flags/" + imgUrl);
            $("#btn-close").click();

        });


    });

</script>